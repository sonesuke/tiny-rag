[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs>=0.3.0"]
build-backend = "hatchling.build"

[project]
name = "tiny_rag"
dynamic = ["version"]
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "sonesuke", email = "iamsonesuke@gmail.com" }
]
requires-python = ">=3.13"
classifiers = [
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
]
license = { text = "MIT" }
keywords = []
dependencies = [
    "sentence-transformers>=3.3.1",
    "numpy>=1.24.0",
    "typing-extensions>=4.0.0",
    "protobuf>=3.20.0",
    "sentencepiece>=0.1.95",
    "faiss-cpu>=1.7.4",
]

[project.urls]
"Homepage" = "https://github.com/sonesuke/tiny-rag"
"Bug Reports" = "https://github.com/sonesuke/tiny-rag/issues"
"Source" = "https://github.com/sonesuke/tiny-rag"

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version", fallback_version = "0.1.0" }

[tool.hatch.build.targets.wheel]
packages = ["src/tiny_rag"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[dependency-groups]
dev = [
    "pyright>=1.1.390",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.10",
    "datasets>=3.0.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "tqdm>=4.64.0",
    "faiss-cpu>=1.7.4",
]

[tool.pyright]
include = ["src", "tests", "bench"]
exclude = ["**/__pycache__", "**/node_modules"]
strict = ["src"]
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportPrivateImportUsage = true

# Separate config for bench directory with relaxed type checking
[[tool.pyright.executionEnvironments]]
root = "bench"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownParameterType = "none"
reportMissingTypeArgument = "none"
reportArgumentType = "none"
reportIndexIssue = "none"
reportCallIssue = "none"
reportAttributeAccessIssue = "none"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--doctest-modules",
]

[tool.coverage.run]
omit = []

[tool.ruff]
exclude = [".venv", "tests"]
target-version = "py313"
include = ["*.py"]
line-length = 120

[tool.ruff.lint]
select = [
  "C9",   # McCabe complexity
  "ANN",  # Type annotations
  "S",    # Security
  "E",    # Syntax errors
  "F",    # Pyflakes
  "W",    # Warnings
  "I",    # isort
  "D",    # Docstrings
  "N",    # Naming conventions
  "UP",   # pyupgrade
  "B",    # flake8-bugbear
  "SIM",  # flake8-simplify
  "ARG",  # flake8-unused-arguments
  "RET",  # flake8-return
  "TRY",  # tryceratops
  "PTH",  # Use pathlib
  "PL",   # Pylint
]
ignore = [
  "D203",  # one-blank-line-before-class
  "D213",  # multi-line-summary-second-line
  "D407",  # dashed-underline-after-section
  "D408",  # section-underline-after-name
  "D409",  # section-underline-matches-section-length
  "S101",  # Use of assert (common in tests)
  "PLR0913" # Too many arguments
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["tiny_rag"]
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pydocstyle]
convention = "google"